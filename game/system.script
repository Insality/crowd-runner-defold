local utils = require("game.utils")

local player_entity = nil
local enemies = {}

local TARGET_FPS = 60
local TEMP_VECTOR = vmath.vector3(0) -- For memory optimization
local BOX_HALF_SIZE = 2300 -- 530 / 800 / 1700 / 2300 / 3600
local ENEMIES_COUNT = 16000 -- 2048 / 3300 / 10000 / 16000 / 32761
local FAR_DISTANCE = 200 -- Radius to move enemies from player

local SCREEN_WIDTH = sys.get_config("display.width", 960)
local SCREEN_HEIGHT = sys.get_config("display.width", 640)

local BOX_WIDTH = SCREEN_WIDTH + BOX_HALF_SIZE
local BOX_HEIGHT = SCREEN_HEIGHT + BOX_HALF_SIZE
BOX_HALF_SIZE = -BOX_HALF_SIZE

-- In some rare cases with a lot of calculations and global
-- function calls (like this code) it worth to pre-cache
-- functions in local scope to avoid using global table.
-- More info: https://www.lua.org/gems/sample.pdf
-- it's not something you should do in regular code!
local f_math_sqrt = math.sqrt
local f_math_min = math.min
local f_math_max = math.max
local f_math_random = math.random
local f_go_set_position = go.set_position

-- it's always better to calculate hashes only once
local KEY_A = hash("key_a")
local KEY_D = hash("key_d")
local KEY_W = hash("key_w")
local KEY_S = hash("key_s")
local KEY_P = hash("key_p")

local ANIM_RUN = hash("enemy_run")
local ANIM_IDLE = hash("enemy_idle")

local uid = 0
local function create_entity(game_object, pos)
	local entity = {
		-- Uid used for frame update shift (for smooth huge updates)
		uid = uid,
		game_object = msg.url(nil, game_object, nil),
		-- Cache sprite url, we use it a lot
		sprite_url = msg.url(nil, game_object, "sprite"),

		-- Avoid using vector3 user date to speedup calculations
		-- Also avoid lua tables because of memory optimization
		-- You can use vector3 and lua tables, but it cost a little more CPU/Memory than numbers
		-- So for huge data set like this it's matter
		position_x = pos.x,
		position_y = pos.y,
		position_previous_x = pos.x,
		position_previous_y = pos.y,
		move_vector_x = 0,
		move_vector_y = 0,
		comp_vector_x = 0,
		comp_vector_y = 0,
		radius = 22,
		speed = 7,
		anim_current = nil,
		anim_run = ANIM_RUN,
		anim_idle = ANIM_IDLE,
		is_flip = false,
		is_sprite_enabled = true,
		frame_last_update = 0
	}
	uid = uid + 1
	utils.entgrid_add(entity)
	return entity
end

local function calculate_comp_vector(entity, other)
	local x = other.position_x - entity.position_x
	local y = other.position_y - entity.position_y
	local distance = f_math_sqrt(x * x + y * y)
	if distance ~= 0 then
		-- Calculate comp vector
		x = x / distance
		y = y / distance
		if distance < entity.radius + other.radius then
			-- Apply comp vector to myself
			entity.comp_vector_x = entity.comp_vector_x - x
			entity.comp_vector_y = entity.comp_vector_y - y

			-- We affects other comp_vector, because we check collisions
			-- only in 4 ways (entities grid optimization)
			-- If we will check in all 8 ways, we can disable it and
			-- calculate only own comp_vector
			other.comp_vector_x = other.comp_vector_x + x
			other.comp_vector_y = other.comp_vector_y + y
		end
	end
end

local function calculate_move_vector(entity, other, distance)
	if entity == other then
		return
	end

	entity.move_vector_x, entity.move_vector_y = 0, 0

	if other.move_vector_x == 0 and other.move_vector_y == 0 then
		return
	end

	local x = other.position_x - entity.position_x
	local y = other.position_y - entity.position_y
	if distance ~= 0 and distance < FAR_DISTANCE then
		-- Normalize vector
		x = x / distance
		y = y / distance
		-- Apply move_vector
		entity.move_vector_x = entity.move_vector_x - x
		entity.move_vector_y = entity.move_vector_y - y
	end
end


-- Defold can draw all 32000 entities, but with sprite disable it will much faster
-- Note: for enable/disable sprite you have to send messages! A lot of messages can affect your perfomance
local SPRITE_DRAW_THRESHOLD = 800

-- Dictionary with distance: active frame number. We rarely update entities that far
-- away from player. For most game cases you can disable only part of update, for example physics.
-- In this example we can skip all entity's update
local SKIP_FRAME_THRESHOLDS = {
	{400,2}, --[1] distance [2] frames
	{600,4},
	{800,8},
	{1000,math.huge},
}

local function is_skip_frame(entity, distance, frame)
	for i=#SKIP_FRAME_THRESHOLDS,1,-1 do
		local threshold_data = SKIP_FRAME_THRESHOLDS[i]
		if(distance>threshold_data[1])then
			return (frame + entity.uid) % threshold_data[2] ~= 0
		end
	end
end


local function get_distance_to_player(entity)
	local x = entity.position_x - player_entity.position_x
	local y = entity.position_y - player_entity.position_y
	return f_math_sqrt(x * x + y * y)
end


local function update_entity(entity, frame, dt)
	local distance_to_player = get_distance_to_player(entity)
	utils.set_sprite_enabled(entity, distance_to_player < SPRITE_DRAW_THRESHOLD)

	if is_skip_frame(entity, distance_to_player, frame) then
		return
	end

	-- Physics
	utils.entgrid_foreach(entity, calculate_comp_vector)
	calculate_move_vector(entity, player_entity, distance_to_player)

	-- Get move delta vector
	local x = (entity.move_vector_x + entity.comp_vector_x) * entity.speed * TARGET_FPS
	local y = (entity.move_vector_y + entity.comp_vector_y) * entity.speed * TARGET_FPS
	entity.comp_vector_x = 0
	entity.comp_vector_y = 0

	-- Apply delta to position
	entity.position_previous_x = entity.position_x
	entity.position_previous_y = entity.position_y
	entity.position_x = entity.position_x + x * dt
	entity.position_y = entity.position_y + y * dt

	-- Restrict box size
	entity.position_x = f_math_min(f_math_max(entity.position_x, BOX_HALF_SIZE), BOX_WIDTH)
	entity.position_y = f_math_min(f_math_max(entity.position_y, BOX_HALF_SIZE), BOX_HEIGHT)

	utils.entgrid_update(entity)

	utils.check_flip(entity)
	utils.check_animation(entity)

	-- Update move using lua user data vector3
	TEMP_VECTOR.x = entity.position_x
	TEMP_VECTOR.y = entity.position_y
	TEMP_VECTOR.z = utils.get_z_position(entity)
	f_go_set_position(TEMP_VECTOR, entity.game_object)
end



function init(self)
	-- Create player entity
	local player_id = go.get_id("/player")
	player_entity = create_entity(player_id, go.get_position(player_id))
	player_entity.anim_run = hash("player_run")
	player_entity.anim_idle = hash("player_idle")
	player_entity.speed = 6

	local factory_path = msg.url(nil, "system", "factory_enemy")

	-- Create all enemies in one frame, it's hard operation!
	for i = 1, ENEMIES_COUNT do
		-- Random position on all available scene
		TEMP_VECTOR.x = f_math_random(BOX_HALF_SIZE, BOX_WIDTH)
		TEMP_VECTOR.y = f_math_random(BOX_HALF_SIZE, BOX_HEIGHT)

		-- Change scale of some enemies +- 0.3
		local scale_factor = 1
		if f_math_random() > 0.9 then
			scale_factor = 0.7 + f_math_random() * 0.6
		end

		local enemy_game_object = factory.create(factory_path, TEMP_VECTOR, nil, nil, 4 * scale_factor)
		local enemy = create_entity(enemy_game_object, TEMP_VECTOR)
		enemy.radius = enemy.radius * scale_factor

		enemies[#enemies + 1] = enemy
	end

	msg.post(".", "acquire_input_focus")
end


function final(self)
	msg.post(".", "release_input_focus")
end

local frame_count = 0

function update(self, dt)
	frame_count = frame_count + 1
	update_entity(player_entity, frame_count, dt)

	for index = 1, #enemies do
		update_entity(enemies[index], frame_count, dt)
	end
end

function on_input(self, action_id, action)
	if action_id == KEY_A then
		player_entity.move_vector_x = action.released and 0 or -1
	end

	if action_id == KEY_D then
		player_entity.move_vector_x = action.released and 0 or  1
	end

	if action_id == KEY_W then
		player_entity.move_vector_y = action.released and 0 or  1
	end

	if action_id == KEY_S then
		player_entity.move_vector_y = action.released and 0 or -1
	end

	if action_id == KEY_P and action.pressed then
		self._profiler_enabled = not self._profiler_enabled
		profiler.enable_ui(self._profiler_enabled)
	end
end
